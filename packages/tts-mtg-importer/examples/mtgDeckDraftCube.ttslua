-- Bundled by luabundle {"rootModuleName":"MTG DeckDraftCube Importer.ee7851.lua","version":"1.6.0"}
local __bundle_require, __bundle_loaded, __bundle_register, __bundle_modules = (function(superRequire)
	local loadingPlaceholder = {[{}] = true}

	local register
	local modules = {}

	local require
	local loaded = {}

	register = function(name, body)
		if not modules[name] then
			modules[name] = body
		end
	end

	require = function(name)
		local loadedModule = loaded[name]

		if loadedModule then
			if loadedModule == loadingPlaceholder then
				return nil
			end
		else
			if not modules[name] then
				if not superRequire then
					local identifier = type(name) == 'string' and '\"' .. name .. '\"' or tostring(name)
					error('Tried to require ' .. identifier .. ', but no such module has been registered')
				else
					return superRequire(name)
				end
			end

			loaded[name] = loadingPlaceholder
			loadedModule = modules[name](require, loaded, register, modules)
			loaded[name] = loadedModule
		end

		return loadedModule
	end

	return require, loaded, register, modules
end)(nil)
__bundle_register("MTG DeckDraftCube Importer.ee7851.lua", function(require, _LOADED, __bundle_register, __bundle_modules)
require("import")

end)
__bundle_register("import", function(require, _LOADED, __bundle_register, __bundle_modules)
local env = 'PROD'
-- local env = 'STAGING'
-- local env = 'DEV'

local assets = require("cloud_assets")
if env == 'PROD' then
  BaseURL = 'https://importer-m7vpzqazfa-uc.a.run.app'
elseif env == 'STAGING' then
  BaseURL = 'https://importer-staging-m7vpzqazfa-uc.a.run.app'
else
  BaseURL = 'http://localhost:8080'
  -- assets = require 'local_assets'
end

local modal = require("modal")
local utils = require("utils")

function onLoad()
  utils.set_guid(self.getGUID())

  UI.setCustomAssets(assets)

  self.createButton({
    click_function = 'show_import',
    function_owner = self,
    position = {0, 0.1, 0},
    height = 800,
    width = 800,
    color = {1, 1, 1, 0},
  })
end

local function render_defaults()
  return {
    tag = 'Defaults',
    attributes = {id = 'tts-importer-defaults'},
    children = {
      {tag = 'Button', attributes = {rectAlignment = 'UpperLeft'}},
      {
        tag = 'InputField',
        attributes = {rectAlignment = 'UpperLeft', fontSize = '20', caretWidth = '2'},
      },
      {
        tag = 'Text',
        attributes = {
          rectAlignment = 'UpperLeft',
          tooltipPosition = 'Left',
          -- tooltipBackgroundColor = 'rgba(0, 0, 0, 0.99)',
          tooltipBackgroundColor = 'rgb(0,0,0)',
        },
      },
      {tag = 'Image', attributes = {rectAlignment = 'UpperLeft'}},
      {tag = 'Toggle', attributes = {rectAlignment = 'UpperLeft'}},
      {tag = 'Dropdown', attributes = {rectAlignment = 'UpperLeft'}},
    },
  }
end

function show_import(_, color)
  if modal.exists(color) then
    modal.show(color)
    return
  end

  local ui = UI.getXmlTable()
  if UI.getAttribute('tts-importer-defaults', 'id') == nil then
    table.insert(ui, render_defaults())
  end

  local m = modal.Modal:new(color)
  local modal_xml = m:render()
  table.insert(ui, modal_xml)
  UI.setXmlTable(ui)
  Wait.frames(function()
    m:show()
  end, 2)
end

end)
__bundle_register("utils", function(require, _LOADED, __bundle_register, __bundle_modules)
local M = {_guid = ''}

function M.flatten(...)
  local result = {}
  for _, arr in ipairs({...}) do
    for _, v in ipairs(arr) do
      result[#result + 1] = v
    end
  end
  return result
end

function M.set_guid(guid)
  M._guid = guid
end

function M.callback(name, fn)
  if M._guid == '' then
    error('GUID is undefined')
  end
  _G[name] = fn
  return M._guid .. '/' .. name
end

function M.merge(tbl, ...)
  for _, m in ipairs({...}) do
    for k, v in pairs(m) do
      tbl[k] = v
    end
  end
  return tbl
end

return M

end)
__bundle_register("modal", function(require, _LOADED, __bundle_register, __bundle_modules)
local utils = require("utils")
local api = require("api")

local M = {}

local AllModals = {}

function M.exists(color)
  return AllModals[color] ~= nil
end

function M.show(color)
  if AllModals[color] == nil then
    error('no modal for ' .. tostring(color))
  end
  AllModals[color]:show()
end

local Modal = {}

M.Modal = Modal

function Modal:new(color)
  if M.exists(color) then
    return AllModals[color]
  end

  local modal = {color = color}
  setmetatable(modal, self)
  self.__index = self

  self._deck_form = {url = '', data = ''}
  self._draft_form = {set = ''}
  self._cube_draft_form = {url = '', drafters = 1, packSize = 15}
  self._settings = {useStates = true, lang = 'en'}
  self._tab = 'deck'

  AllModals[color] = modal

  return modal
end

function Modal:_id()
  return 'modal-' .. self.color
end

function Modal:show()
  UI.setAttribute(self:_id(), 'visibility', self.color)
  self:update_form_values()
end

function Modal:hide()
  UI.setAttribute(self:_id(), 'visibility', 'false')
end

function Modal:id(suffix)
  return self.color .. '-' .. suffix
end

function Modal:set_tab(tab)
  UI.setAttribute(self:id(self._tab .. '-btn'), 'visibility', '')
  if tab ~= 'settings' then
    UI.setAttribute(self:id(tab .. '-btn'), 'visibility', 'false')
  end
  self._tab = tab

  local tabs = {'deck', 'draft', 'cube', 'settings'}
  for _, tabName in ipairs(tabs) do
    local tabId = self:id(tabName .. '-tab')
    if tabName == tab then
      UI.setAttribute(tabId, 'active', 'true')
    else
      UI.setAttribute(tabId, 'active', 'false')
    end
  end
end

function Modal:update_form_values()
  UI.setValue(self:id('deck-input'), self._deck_form.data)
  UI.setValue(self:id('url-input'), self._deck_form.url)

  UI.setValue(self:id('set-input'), self._draft_form.set)

  UI.setAttribute(self:id('state-input'), 'isOn', self._settings.useStates)
end

function Modal:render_deck_button()
  return {
    tag = 'Button',
    attributes = {
      id = self:id('deck-btn'),

      onClick = utils.callback(self:id('switch-to-deck'), function()
        self:set_tab('deck')
      end),

      visibility = 'false',
      transition = 'SpriteSwap',
      sprite = 'deck_tab_button',
      highlightedSprite = 'deck_tab_button_hover',
      pressedSprite = 'deck_tab_button_hover',

      offsetXY = '135 0',
      height = 40,
      width = 100,
    },
  }
end

function Modal:render_draft_button()
  return {
    tag = 'Button',
    attributes = {
      id = self:id('draft-btn'),
      onClick = utils.callback(self:id('switch-to-draft'), function()
        self:set_tab('draft')
      end),

      transition = 'SpriteSwap',
      sprite = 'draft_tab_button',
      highlightedSprite = 'draft_tab_button_hover',
      pressedSprite = 'draft_tab_button_hover',

      offsetXY = '235 0',
      height = 40,
      width = 100,
    },
  }
end

function Modal:render_cube_button()
  return {
    tag = 'Button',
    attributes = {
      id = self:id('cube-btn'),

      onClick = utils.callback(self:id('switch-to-cube'), function()
        self:set_tab('cube')
      end),

      transition = 'SpriteSwap',
      sprite = 'cube_tab_button',
      highlightedSprite = 'cube_tab_button_hover',
      pressedSprite = 'cube_tab_button_hover',

      offsetXY = '335 0',
      height = 40,
      width = 100,
    },
  }
end

function Modal:render_submit_button(onclick)
  return {
    tag = 'Button',
    attributes = {
      onClick = onclick,
      transition = 'SpriteSwap',
      sprite = 'submit_button',
      highlightedSprite = 'submit_button_hover',
      pressedSprite = 'submit_button_hover',

      offsetXY = '488 -558',
      height = 28,
      width = 79,
    },
  }
end

function Modal:render_settings_button()
  return {
    tag = 'Button',
    attributes = {
      id = 'settings-btn',

      onClick = utils.callback(self:id('switch-to-settings'), function()
        self:set_tab('settings')
      end),

      transition = 'SpriteSwap',
      sprite = 'settings_button',
      highlightedSprite = 'settings_button_hover',
      pressedSprite = 'settings_button_hover',

      offsetXY = '532 -8',
      height = 24,
      width = 24,
    },
  }
end

function Modal:render_buttons()
  return {
    self:render_deck_button(),
    self:render_draft_button(),
    self:render_cube_button(),
    self:render_settings_button(),
  }
end

function Modal:render_deck_tab()
  return {
    tag = 'Panel',
    attributes = {id = self:id('deck-tab'), rectAlignment = 'UpperLeft', active = 'true'},
    children = {
      {tag = 'Image', attributes = {image = 'deck_tab', width = 600, height = 600}},
      {
        tag = 'InputField',
        attributes = {
          id = self:id('url-input'),

          onEndEdit = utils.callback(self:id('set-deck-url'), function(_, text, _)
            self._deck_form.url = text
          end),
          lineType = 'SingleLine',
          placeholder = 'https://scryfall.com/@rikrassen/decks/abc-123',

          offsetXY = '32 -118',
          height = 46,
          width = 535,
        },
      },
      {
        tag = 'Text',
        attributes = {
          tooltip = [[<size="20">Deck builder URL

Supported sites are:
  - aetherhub.com
  - archidekt.com
  - deckstats.net
  - moxfield.com
  - mtggoldfish.com
  - scryfall.com
  - tappedout.net</size>]],

          offsetXY = '276 -64',
          height = 22,
          width = 22,
        },
      },
      {
        tag = 'Text',
        attributes = {
          tooltip = [[<size="20">Paste in your deck in one of the following formats.

1. .dec format
     e.g. "1 [9ED] Storm Crow"

2. MTG Arena .txt
     e.g. "1 Storm Crow (9ED) 100

Note: the final number is the collector's number. This allows you
      to specify a certain printing within a set, i.e. lands or
      showcase.

3. MTG Online .txt (a.k.a. simple format)
     e.g. "1 Storm Crow"

Notes:
  - Double-faced cards are specified using the name of the front,
    i.e. "Treasure Map", or both faces, separated by //,
    i.e. "Treasure Map // Treasure Cove"
  - All lines beginning with // are ignored.</size>]],

          offsetXY = '353 -186',
          height = 22,
          width = 22,
        },
      },
      {
        tag = 'InputField',
        attributes = {
          id = self:id('deck-input'),
          onEndEdit = utils.callback(self:id('set-deck'), function(_, text, _)
            self._deck_form.data = text
          end),
          lineType = 'MultiLineNewline',

          offsetXY = '32 -240',
          height = 305,
          width = 535,
        },
      },
      self:render_submit_button(utils.callback(self:id('deck-submit'), function()
        api.deck(self.color, utils.merge({}, self._deck_form, self._settings), function()
          self:hide()
        end)
      end)),
    },
  }
end

function Modal:render_draft_tab()
  return {
    tag = 'Panel',
    attributes = {id = self:id('draft-tab'), active = 'false', rectAlignment = 'UpperLeft'},
    children = {
      {tag = 'Image', attributes = {image = 'draft_tab', width = 600, height = 600}},
      {
        tag = 'InputField',
        attributes = {
          id = self:id('set-input'),
          onEndEdit = utils.callback(self:id('set-set'), function(_, text, _)
            self._draft_form.set = text
          end),
          lineType = 'SingleLine',
          placeholder = 'i.e. CMR',

          offsetXY = '32 -118',
          height = 46,
          width = 535,
        },
      },
      {
        tag = 'Text',
        attributes = {
          tooltip = [[<size="20">Generates 3 booster packs in front of each seated player.
Drafting must be completed manually after that</size>]],
          offsetXY = '327 -63',
          height = 24,
          width = 24,
        },
      },
      self:render_submit_button(utils.callback(self:id('draft-submit'), function()
        api.draft(self.color, utils.merge({}, self._draft_form, self._settings), function()
          self:hide()
        end)
      end)),
    },
  }
end

function Modal:render_cube_tab()
  local num_seated_players = #getSeatedPlayers()
  local pack_size = 15
  self._cube_draft_form.drafters = num_seated_players
  self._cube_draft_form.packSize = pack_size
  return {
    tag = 'Panel',
    attributes = {id = self:id('cube-tab'), rectAlignment = 'UpperLeft', active = 'false'},
    children = {
      {tag = 'Image', attributes = {image = 'cube_tab', width = 600, height = 600}},
      {
        tag = 'InputField',
        attributes = {
          id = self:id('cube-url-input'),
          onEndEdit = utils.callback(self:id('set-cube-url'), function(_, text, _)
            self._cube_draft_form.url = text
          end),
          lineType = 'SingleLine',
          placeholder = 'https://cubetutor.com/viewcube/123',

          offsetXY = '32 -118',
          height = 46,
          width = 535,
        },
      },
      {
        tag = 'Text',
        attributes = {
          tooltip = [[<size="20">Cube site URL

Supported sites are:
  - cubetutor.com
  - cubecobra.com
  - tappedout.net</size>]],

          offsetXY = '276 -64',
          height = 22,
          width = 22,
        },
      },
      {
        tag = 'InputField',
        attributes = {
          id = self:id('cube-players-input'),
          onEndEdit = utils.callback(self:id('set-cube-players'), function(_, text, _)
            self._cube_draft_form.drafters = tonumber(text)
          end),
          lineType = 'SingleLine',
          placeholder = ' ',
          text = num_seated_players,
          characterValidation = 'Integer',

          offsetXY = '322 -193',
          height = 46,
          width = 78,
        },
      },
      {
        tag = 'InputField',
        attributes = {
          id = self:id('cube-pack-size-input'),
          onEndEdit = utils.callback(self:id('set-cube-pack-size'), function(_, text, _)
            self._cube_draft_form.packSize = tonumber(text)
          end),
          lineType = 'SingleLine',
          placeholder = ' ',
          text = pack_size,
          characterValidation = 'Integer',

          offsetXY = '322 -273',
          height = 46,
          width = 78,
        },
      },
      self:render_submit_button(utils.callback(self:id('cube-submit'), function()
        api.draft_cube(self.color, utils.merge({}, self._cube_draft_form, self._settings),
                       function()
          self:hide()
        end)
      end)),
    },
  }
end

function Modal:render_settings_tab()
  local options = {}
  local langs = {
    ['English'] = 'en',
    ['français'] = 'fr',
    -- 'grc' = Greek, but only one card exists, omitted,
    ['Русский язык'] = 'ru',
    ['简体中文'] = 'zhs',
    -- 'ph' = "Phryrexian", omitted,
    -- 'ar' = Arabic, omitted,
    -- 'he' = Hebrew, omitted,
    ['Português'] = 'pt',
    ['繁體中文'] = 'zht',
    ['日本語'] = 'ja',
    ['한국어'] = 'ko',
    ['italiano'] = 'it',
    ['español'] = 'es',
    -- 'la' = latin, omitted,
    -- 'sa' = sandskrit (probably), omitted,
    ['Deutsch'] = 'de',
    [''] = '',
  }
  for lang in pairs(langs) do
    table.insert(options, {tag = 'Option', value = lang})
  end
  options[1].attributes = {selected = 'true'}

  return {
    tag = 'Panel',
    attributes = {id = self:id('settings-tab'), rectAlignment = 'UpperLeft', active = 'false'},
    children = {
      {tag = 'Image', attributes = {image = 'settings_tab', width = 600, height = 600}},
      {
        tag = 'Text',
        attributes = {
          tooltip = [[<size="20">Language

If the card exists in the selected language (on Scryfall) that card will be
used. An English card will be used as a fallback. Specific printings are still
respected as they apply.</size>]],

          offsetXY = '209 -63',
          height = 22,
          width = 22,
        },
      },
      {
        tag = 'Dropdown',
        attributes = {
          onValueChanged = utils.callback(self:id('set-language'), function(_, option, _)
            if option == '' then
              return
            end
            local lang = ''
            for k, v in pairs(langs) do
              if k == option then
                lang = v
                break
              end
            end
            self._settings.lang = lang
          end),

          offsetXY = '32 -118',
          height = '47',
          width = '535',
        },
        children = options,
      },
      {
        tag = 'InputField',
        attributes = {
          onValueChanged = utils.callback(self:id('set-back-url'), function(_, val, _)
            self._settings.backURL = val
          end),

          offsetXY = '32 -244',
          height = '47',
          width = '535',
        },
      },
      {
        tag = 'Toggle',
        value = 'Use states for double-sided cards',
        attributes = {
          id = self:id('state-input'),

          onValueChanged = utils.callback(self:id('set-use-states'), function(_, val, _)
            self._settings.useStates = val == 'True'
          end),

          toggleHeight = '22',
          toggleWidth = '23',

          offsetXY = '25 -322',

          height = '22',
          width = '23',
        },
      },
      -- A transparent box to act like a HTML click box for the dropdown
      {
        tag = 'Text',
        attributes = {
          offsetXY = '25 -330',
          height = '22',
          width = '442',
          onClick = utils.callback(self:id('set-use-states-label'), function()
            self._settings.useStates = not self._settings.useStates
            UI.setAttribute(self:id('state-input'), 'isOn', self._settings.useStates)
          end),
        },
      },
    },
  }
end

function Modal:render()
  return {
    tag = 'Panel',
    attributes = {
      height = 600,
      width = 600,
      id = self:_id(),
      visibility = self.color,
      allowDragging = true,
      returnToOriginalPositionWhenReleased = false,
    },
    children = utils.flatten({
      self:render_deck_tab(),
      self:render_draft_tab(),
      self:render_cube_tab(),
      self:render_settings_tab(),
    }, self:render_buttons(), {
      {
        tag = 'Button',
        attributes = {
          onClick = utils.callback(self:id('on-cancel'), function()
            self:hide()
          end),

          transition = 'SpriteSwap',
          sprite = 'close_button',
          highlightedSprite = 'close_button_hover',
          pressedSprite = 'close_button_hover',

          offsetXY = '569 -9',
          height = 23,
          width = 23,
        },
      },
    }),
  }
end

return M

end)
__bundle_register("api", function(require, _LOADED, __bundle_register, __bundle_modules)
local CLIENT_VERSION = '0.9.1'
local M = {}

local function split_lines(resp)
  local lines = {}
  for s in resp:gmatch('[^\r\n]+') do
    table.insert(lines, s)
  end
  return lines
end

local function postJSON(url, req, cb)
  local lang = req.lang
  req.lang = nil
  WebRequest.custom(url, 'POST', true, JSON.encode(req), {
    Accept = 'application/x-ndjson',
    ['Content-Type'] = 'application/json',
    ['X-Client-Version'] = CLIENT_VERSION,
    ['Accept-Language'] = lang,
  }, cb)
end

local function callback(resp, player, reqType, next)
  next()

  if resp.error ~= nil then
    if string.find(resp.text, '"error"') then
      local data = JSON.decode(resp.text)
      broadcastToColor('There appears to be an issue with your ' .. reqType .. ': ' .. data.error,
                       player.color, 'Red')
    else
      broadcastToColor('There was an issue with the server, please try again later', player.color,
                       'Red')
    end
    log(player.color .. ': server returned the error: ' .. resp.error)
    return
  end

  if not resp.is_done then
    return
  end

  broadcastToColor('Rendering ' .. reqType .. '...', player.color, 'Yellow')

  for _, obj in ipairs(split_lines(resp.text)) do
    spawnObjectJSON({json = obj})
  end
end

function M.draft_cube(color, data, next)
  if data.url == '' then
    broadcastToColor('Please enter a cube', color, 'Red')
    return
  end

  broadcastToColor('Building cube...', color, 'Yellow')

  local player = Player[color]
  postJSON(BaseURL .. '/draftCube', data, function(resp)
    callback(resp, player, 'cube', next)
  end)
end

function M.deck(color, data, next)
  if data.data == '' and data.url == '' then
    broadcastToColor('Please enter a deck', color, 'Red')
    return
  end

  broadcastToColor('Building deck...', color, 'Yellow')

  local player = Player[color]
  local hand = player.getHandTransform(1)
  if hand == nil then
    broadcastToColor('You need to take a seat for your deck to be generated', color, 'Red')
    return
  end

  data.hand = hand
  postJSON(BaseURL .. '/build', data, function(resp)
    callback(resp, player, 'deck', next)
  end)
end

function M.draft(color, data, next)
  if data.set == '' then
    broadcastToColor('Please enter a set', color, 'Red')
    return
  end

  broadcastToAll('Building boosters...', 'Yellow')

  local hands = {}
  for _, seatedPlayer in ipairs(getSeatedPlayers()) do
    local player = Player[seatedPlayer]
    local hand = player.getHandTransform(1)
    -- Skip players that don't actually have a seat.
    if hand == nil then
      broadcastToColor('You need to take a seat for packs to be generated', seatedPlayer, 'Red')
    else
      table.insert(hands, {position = hand.position, forward = hand.forward, right = hand.right})
    end
  end

  local player = Player[color]

  data.hands = hands
  postJSON(BaseURL .. '/draft', data, function(resp)
    callback(resp, player, 'boosters', next)
  end)
end

return M

end)
__bundle_register("cloud_assets", function(require, _LOADED, __bundle_register, __bundle_modules)
return {
  {name = 'deck_tab', url = 'https://storage.googleapis.com/tts-mtg-import-assets/deck_tab_v3.png'},
  {
    name = 'deck_tab_button',
    url = 'https://storage.googleapis.com/tts-mtg-import-assets/deck_tab_button.png',
  },
  {
    name = 'deck_tab_button_hover',
    url = 'https://storage.googleapis.com/tts-mtg-import-assets/deck_tab_button_hover.png',
  },
  {
    name = 'draft_tab',
    url = 'https://storage.googleapis.com/tts-mtg-import-assets/draft_tab_v3.png',
  },
  {
    name = 'draft_tab_button',
    url = 'https://storage.googleapis.com/tts-mtg-import-assets/draft_tab_button.png',
  },
  {
    name = 'draft_tab_button_hover',
    url = 'https://storage.googleapis.com/tts-mtg-import-assets/draft_tab_button_hover.png',
  },
  {name = 'cube_tab', url = 'https://storage.googleapis.com/tts-mtg-import-assets/cube_tab_v2.png'},
  {
    name = 'cube_tab_button',
    url = 'https://storage.googleapis.com/tts-mtg-import-assets/cube_tab_button.png',
  },
  {
    name = 'cube_tab_button_hover',
    url = 'https://storage.googleapis.com/tts-mtg-import-assets/cube_tab_button_hover.png',
  },
  {
    name = 'close_button',
    url = 'https://storage.googleapis.com/tts-mtg-import-assets/close_button.png',
  },
  {
    name = 'close_button_hover',
    url = 'https://storage.googleapis.com/tts-mtg-import-assets/close_button_hover.png',
  },
  {
    name = 'submit_button',
    url = 'https://storage.googleapis.com/tts-mtg-import-assets/submit_button.png',
  },
  {
    name = 'submit_button_hover',
    url = 'https://storage.googleapis.com/tts-mtg-import-assets/submit_button_hover.png',
  },
  {
    name = 'settings_button',
    url = 'https://storage.googleapis.com/tts-mtg-import-assets/settings_button.png',
  },
  {
    name = 'settings_button_hover',
    url = 'https://storage.googleapis.com/tts-mtg-import-assets/settings_button_hover.png',
  },
  {
    name = 'settings_tab',
    url = 'https://storage.googleapis.com/tts-mtg-import-assets/settings_tab_v0_8_1.png',
  },
}

end)
return __bundle_require("MTG DeckDraftCube Importer.ee7851.lua")