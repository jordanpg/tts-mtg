name: CI

env:
  NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}
  GCLOUD_PROJECT_ID: ${{ secrets.GCLOUD_PROJECT_ID }}

on:
  push:
    branches: ['main']
  pull_request:
    branches: ['main']

permissions:
  actions: read
  contents: read

jobs:
  main:
    runs-on: ubuntu-latest
    outputs:
      affected: ${{ steps.affected.outputs.affected }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      # This enables task distribution via Nx Cloud
      # Run this command as early as possible, before dependencies are installed
      # Learn more at https://nx.dev/ci/reference/nx-cloud-cli#npx-nxcloud-startcirun
      # Uncomment this line to enable task distribution
      # - run: pnpm dlx nx-cloud start-ci-run --distribute-on="3 linux-medium-js" --stop-agents-after="build"

      # Cache node_modules
      - name: Install Node to GitHub Actions functionality
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install project pnpm dependencies
        run: pnpm install --frozen-lockfile

      - name: Set SHAs for "nx affected" commands
        uses: nrwl/nx-set-shas@v4

      - name: Install luabundler
        run: pnpm install -g luabundler

      # Prepend any command with "nx-cloud record --" to record its logs to Nx Cloud
      # - run: pnpm exec nx-cloud record -- echo Hello World
      # Nx Affected runs only tasks affected by the changes in this PR/commit. Learn more: https://nx.dev/ci/features/affected
      - name: Perform nx affected
        run: pnpm exec nx affected -t lint test build --exclude 'func-runner'
      - name: Save affected to output
        id: affected
        run: |
          echo "affected=$(pnpm exec nx show projects --affected | tr '\n' ' ')" >> "$GITHUB_OUTPUT"

      # For build artifacts which need publicly accessible links, individual steps should be used!
      - name: 'Upload build artifact: Importer'
        if: ${{ contains(steps.affected.outputs.affected, 'tts-mtg-importer') }}
        uses: actions/upload-artifact@v4
        with:
          name: dist-importer
          path: dist/packages/tts-mtg-importer/bundle.lua
          if-no-files-found: error
          include-hidden-files: true

      - name: 'Upload build arfact: Moxfield Proxy'
        id: moxfield_proxy
        if: ${{ contains(steps.affected.outputs.affected, 'moxfield-proxy') }}
        uses: actions/upload-artifact@v4
        with:
          name: moxfield-proxy
          path: dist/packages/moxfield-proxy
          if-no-files-found: error
          include-hidden-files: true

  deploy-moxfield-proxy:
    name: Deploy Moxfield Proxy
    runs-on: ubuntu-latest
    if: ${{ contains(needs.main.outputs.affected, 'moxfield-proxy') && github.ref == 'refs/heads/main' }}
    needs:
      - main
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: moxfield-proxy
          path: ~/moxfield-proxy

      # Set up Google Cloud
      - uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}

      # Deploy to Cloud Run Function
      - id: deploy
        uses: google-github-actions/deploy-cloud-functions@v3
        timeout-minutes: 10
        with:
          name: ${{ vars.MFP_SERVICE }}
          region: ${{ vars.MFP_REGION }}
          source_dir: ~/moxfield-proxy
          runtime: nodejs22
          entry_point: MoxfieldProxy
